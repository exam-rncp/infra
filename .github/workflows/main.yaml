name: EKS Infrastructure Setup

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - init
          - apply
          - destroy
      workspace:
        description: 'Terraform workspace'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

permissions:
  contents: read
  id-token: write
  actions: write 

concurrency:
  group: eks-infra-setup
  cancel-in-progress: true

env:
  AWS_REGION: eu-central-1

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize Terraform S3 Backend
        if: ${{ github.event.inputs.action == 'init' }}
        run: |
          chmod +x init-tf-backen.sh
          ./init-tf-backen.sh

  terraform:
    name: Terraform Execution
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.7.5'
          terraform_wrapper: false

      - name: Install Dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          python3 -m pip install --upgrade pip awscli

      - name: Configure AWS Credentials
        run: |
          mkdir -p ~/.aws
          echo "[f3linadmin]" >> ~/.aws/credentials
          echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "[default]" >> ~/.aws/config
          echo "region = ${{ env.AWS_REGION }}" >> ~/.aws/config

      - name: Fetch S3 Bucket Name
        id: fetch_bucket
        run: |
          BUCKET_NAME=$(aws s3api list-buckets --query "Buckets[?starts_with(Name, 'tf-remote-state-')].Name" --output text  --profile f3linadmin)
          echo "BUCKET_NAME=${BUCKET_NAME}" >> $GITHUB_ENV

      - name: Update backend.tf with S3 Bucket Name
        run: |
          sed -i "s/^\\s*bucket\\s*=\\s*\".*\"/  bucket = \"${{ env.BUCKET_NAME }}\"/" backend.tf

      - name: Set Cloudflare API Token in Configuration Files
        run: |
          sed -i "s/api_token  = \".*\"/api_token = \"${{ secrets.CLOUDFLARE_API_TOKEN }}\"/" providers.tf
          sed -i "s/cloudflare_api_token = \".*\"/cloudflare_api_token = \"${{ secrets.CLOUDFLARE_API_TOKEN }}\"/" dev.tfvars
          terraform fmt

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Initialize Terraform
        run: terraform init -upgrade 
 
      - name: Select Terraform Workspace
        if: ${{ github.event.inputs.action != 'init' }}
        run: terraform workspace select ${{ github.event.inputs.workspace }}

      - name: Validate Terraform Configuration
        run: terraform validate -no-color

      - name: Terraform Plan
        run: |
          terraform plan -var-file="${{ github.event.inputs.workspace }}.tfvars" -no-color -out=plan.out
        continue-on-error: false

      - name: Apply Terraform Plan
        if: ${{ github.event.inputs.action == 'apply' }}
        run: terraform apply -auto-approve plan.out

      - name: Destroy Terraform Resources
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: terraform destroy -var-file="${{ github.event.inputs.workspace }}.tfvars" -auto-approve
